{"version":3,"file":"static/js/780.bcfad4bd.chunk.js","mappings":"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","sources":["components/Cards/CardsByID/CardsByID.styled.jsx","components/Cards/Circular.jsx","components/redux/recipes/selector.js","components/Cards/Trailer/Trailer.jsx","components/Cards/CardsByID/CardsByID.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Box } from '@mui/material';\n\nexport const BackdropPath = styled.img`\n  width: 100%;\n  z-index: 1;\n  height: 530px;\n  object-fit: cover;\n`;\nexport const Relative = styled(Box)`\n  position: relative;\n  height: 530px;\n`;\n\nexport const Backdrop = styled(Box)`\n  position: absolute;\n  top: 0;\n\n  background: rgb(69, 68, 75);\n  background: linear-gradient(\n    54deg,\n    rgba(69, 68, 75, 0.7) 0%,\n    rgba(69, 68, 75, 0.6) 46%,\n    rgba(69, 68, 75, 0.5) 100%\n  );\n\n  z-index: 2;\n  width: 100%;\n  height: 100%;\n`;\nexport const Absolute = styled(Box)`\n  position: absolute;\n  top: 20px;\n  left: 270px;\n  z-index: 3;\n`;\n\nexport const PosterPath = styled.img`\n  width: 300px;\n  height: 450px;\n\n  object-fit: cover;\n`;\nexport const Title = styled.h2`\n  margin: 0;\n  color: #ececec;\n  font-weight: 700;\n  display: flex;\n`;\nexport const TextTitle = styled.p`\n  margin: 0;\n  color: #ececec;\n  font-weight: 700;\n  font-size: 30px;\n  margin-left: 5px;\n  opacity: 0.8;\n`;\nexport const Text = styled.p`\n  margin: 0;\n  color: #ececec;\n  font-family: 'Source Sans Pro', Arial, sans-serif;\n`;\n\nexport const ModalBox = styled(Box)`\nposition: absolute;\n top: 50%;\n left: 50%;\n  transform: translate(-50%, -50%);\n  width: 1200;\n  height: 700;\n  backgroundColor:  'background.paper';\n  \n  boxShadow: 24;\n  ;`;\n","import CircularProgress from '@mui/material/CircularProgress';\nimport { Box } from '@mui/material';\nimport Typography from '@mui/material/Typography';\n\nexport const CircularDeterminate = ({percent}) => {\n  return (\n    <Box \n    sx={{ position: 'relative',\n    display: 'inline-flex',\n    backgroundColor:'#032541',\n    borderRadius:'50%',}}>\n    <CircularProgress \n    size=\"45px\" \n    sx={{borderRadius: 5,borderColor:'#032541'}}\n    variant=\"determinate\" \n    value={Math.round(percent * 10)}\n    color={ percent < 5\n      ? \"error\"\n      : percent < 7\n      ? \"warning\"\n      : \"success\"}\n    />\n    <Box\n      sx={{\n        top: 2,\n        left: 2.5,\n        bottom: 0,\n        right: 0,\n        position: 'absolute',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      <Typography variant=\"caption\" color=\"#fff\">\n        {`${Math.round(percent * 10)}%`}\n      </Typography>\n    </Box>\n  </Box>\n  );\n}","\n\nexport const selectSearch = state => state.movie.query;\n\nexport const selectPage = state => state.movie.page;\n\nexport const selectFilterByName = state => state.filter;\n\nexport const selectMovie = state => state.movie.items;\n\nexport const selectMovieID = state => state.movie.itemsID;\n\nexport const selectMovieTrailer = state => state.movie.trailer;\n\nexport const selectFavorite = state => state.movie.favorite;\n\nexport const selectIsLoading = state => state.movie.isLoading;\n\nexport const selectError = state => state.movie.error;\n\nexport const selectModal = state => state.movie.modalItem;\n","import { selectMovieTrailer } from \"components/redux/recipes/selector\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\n\n\nexport const Trailer = ({width, height,}) => {\n  const [trailerKey, setTrailerKey] = useState();\n  \n  const results = useSelector(selectMovieTrailer);\n\n  useEffect(() => {\n    const newTrailerKeys = results.map(({ results }) => {\n      return results\n        .filter(({ name }) => name.toLowerCase().includes('official'))\n        .map(({ key, name }) => ({ key, officialName: name }));\n    });\n\n    setTrailerKey(newTrailerKeys);\n  }, [results]);\n\n    return (\n      <>\n        {results && (\n          <div>\n            {trailerKey &&\n              trailerKey.map(e =>\n                e.slice(0, 1).map(({ key, name }) => {\n                  return (\n                    <div key={key}>\n                          <iframe\n                              width={width}\n                              height={height}\n                        title={name}\n                        src={`https://www.youtube.com/embed/${key}`}\n                      ></iframe>\n                    </div>\n                  );\n                })\n              )}\n          </div>\n        )}\n      </>\n    );\n}","import { Box, Button, Modal } from '@mui/material';\nimport { Container } from '@mui/material';\nimport {\n  getMovieDetails,\n  getMovieTrailer,\n} from 'components/redux/recipes/operation';\nimport { selectMovieID } from 'components/redux/recipes/selector';\nimport moment from 'moment/moment';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CircularDeterminate } from '../Circular';\nimport { Trailer } from '../Trailer/Trailer';\nimport { BsFillPlayFill } from 'react-icons/bs';\n\nimport {\n  Absolute,\n  BackdropPath,\n  Relative,\n  Backdrop,\n  PosterPath,\n  Title,\n  Text,\n  TextTitle,\n  ModalBox,\n} from './CardsByID.styled';\n\nfunction CardsByID({ id }) {\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n  const movieDetails = useSelector(selectMovieID);\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => setOpen(false);\n\n  useEffect(() => {\n    dispatch(getMovieDetails(id));\n  }, [dispatch, id]);\n\n  useEffect(() => {\n    dispatch(getMovieTrailer(id));\n  }, [dispatch, id]);\n  console.log(movieDetails);\n  return (\n    <>\n      <section>\n        {Array.isArray(movieDetails) &&\n          movieDetails.map(\n            ({\n              backdrop_path,\n              original_title,\n              poster_path,\n              genres,\n              overview,\n              release_date,\n              vote_average,\n              id,\n              production_countries,\n              tagline,\n            }) => (\n              <div key={id}>\n                {' '}\n                <Relative>\n                  <Box>\n                    <Backdrop />\n                    <BackdropPath\n                      src={\n                        backdrop_path\n                          ? `https://image.tmdb.org/t/p/original/${backdrop_path}`\n                          : 'Sorry, there is no picture here '\n                      }\n                      alt={original_title}\n                    />\n                  </Box>\n\n                  <Absolute>\n                    <Container maxWidth=\"lg\">\n                      <Box sx={{ display: 'flex' }}>\n                        <Box>\n                          <PosterPath\n                            src={\n                              poster_path\n                                ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                                : 'Sorry, there is no picture here '\n                            }\n                            alt={original_title}\n                          />\n                        </Box>\n\n                        <Box sx={{ ml: 4 }}>\n                          <Box sx={{ display: 'flex' }}>\n                            <Title>{original_title}</Title>\n                            <TextTitle>({release_date.slice(0, 4)})</TextTitle>\n                          </Box>\n                          <Box sx={{ display: 'flex', gap: '15px' }}>\n                            <Text>\n                              {moment(release_date, 'YYYY-MM-DD').format(\n                                'DD.MM.YY'\n                              )}\n                            </Text>\n                            {production_countries &&\n                              production_countries.map(\n                                ({ iso_3166_1, name }) => (\n                                  <Text key={name}>({iso_3166_1}) </Text>\n                                )\n                              )}\n                            <Box\n                              sx={{\n                                display: 'flex',\n                                gap: '10px',\n                                flexWrap: 'wrap',\n                              }}\n                            >\n                              {genres &&\n                                genres.map(({ name, id }) => (\n                                  <Text key={id}>| {name}</Text>\n                                ))}\n                            </Box>\n                          </Box>\n                          <Box\n                            sx={{\n                              display: 'flex',\n                              flexWrap: 'nowrap',\n                              alignItems: 'center',\n                            }}\n                          >\n                            <CircularDeterminate percent={vote_average} />\n                            <Text\n                              style={{\n                                marginLeft: '10px',\n                                width: '90px',\n                                marginRight: '10px',\n                              }}\n                            >\n                              User evaluation\n                            </Text>\n                            <Button\n                              sx={{ color: 'white' }}\n                              onClick={handleOpen}\n                            >\n                              <BsFillPlayFill\n                                style={{ width: '33px', height: '33px' }}\n                              />{' '}\n                              Open Trailer\n                            </Button>\n                            <Modal\n                              open={open}\n                              onClose={handleClose}\n                              aria-labelledby=\"modal-modal-title\"\n                              aria-describedby=\"modal-modal-description\"\n                            >\n                              {Array.isArray(movieDetails) && (\n                                <ModalBox>\n                                  <Trailer width={1400} height={700} />\n                                </ModalBox>\n                              )}\n                            </Modal>\n                          </Box>\n                          <Text\n                            style={{\n                              marginBottom: '0',\n                              fontSize: '1.1em',\n                              fontWeight: '400',\n                              fontStyle: 'italic',\n                              opacity: '0.7',\n                            }}\n                          >\n                            {tagline}\n                          </Text>\n                          <Text\n                            style={{\n                              fontWeight: '600',\n                              fontSize: '1.3em',\n                              marginBottom: ' 8px',\n                            }}\n                          >\n                            {' '}\n                            Descrition\n                          </Text>\n                          <Text>{overview}</Text>\n                        </Box>\n                      </Box>\n                    </Container>\n                  </Absolute>\n                </Relative>\n              </div>\n            )\n          )}\n      </section>\n    </>\n  );\n}\nexport default CardsByID;\n","import { useParams } from \"react-router-dom\"\nimport CardsByID from \"components/Cards/CardsByID/CardsByID\";\nconst MovieDetails = () => {\n  const { id } = useParams();\n\nreturn(\n    <CardsByID id={id}/>\n    )\n\n}\n\nexport default MovieDetails"],"names":["BackdropPath","styled","Relative","Box","Backdrop","Absolute","PosterPath","Title","TextTitle","Text","ModalBox","CircularDeterminate","percent","sx","position","display","backgroundColor","borderRadius","size","borderColor","variant","value","Math","round","color","top","left","bottom","right","alignItems","justifyContent","selectMovie","state","movie","items","selectMovieID","itemsID","selectMovieTrailer","trailer","selectModal","modalItem","Trailer","width","height","useState","trailerKey","setTrailerKey","results","useSelector","useEffect","newTrailerKeys","map","filter","name","toLowerCase","includes","key","officialName","e","slice","title","src","id","open","setOpen","dispatch","useDispatch","movieDetails","handleOpen","handleClose","getMovieDetails","getMovieTrailer","console","log","Array","isArray","backdrop_path","original_title","poster_path","genres","overview","release_date","vote_average","production_countries","tagline","alt","Container","maxWidth","ml","gap","moment","format","iso_3166_1","flexWrap","Circular","style","marginLeft","marginRight","Button","onClick","Modal","onClose","marginBottom","fontSize","fontWeight","fontStyle","opacity","useParams"],"sourceRoot":""}